@page "/superheroes/home"
@inject HttpClient _httpClient
@inject NavigationManager _navigationManager
@inject IDialogService _dialogService

<MudContainer Class="ma-4">
    <div class="d-flex ma-2 justify-center"> 
        <MudFab Color="Color.Primary" Label="Add" @onclick="@(() =>  { _navigationManager.NavigateTo("/superheroes/add"); })" />
    </div>
    <div class="d-flex flex-wrap justify-center">
        @foreach (var item in allHeroes)
        {
            <MudCard Width="250px" Class="ma-2">
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudAvatar Color="Color.Secondary">@item.Id</MudAvatar>
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                            <MudText Typo="Typo.body1">@item.Name</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardMedia Image="@item.ImageUrl" Height="250" />
                    <MudCardContent>
                        <MudText Typo="Typo.body2">Franchise - @item.Franchise</MudText>
                        <MudText Typo="Typo.body2">Gender - @item.Gender</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudIcon Icon="@Icons.Material.Filled.Edit" Title="Edit" @onclick="@(() =>  { _navigationManager.NavigateTo($"/superheroes/edit/{item.Id}"); })"  />
                        <MudIcon Icon="@Icons.Material.Filled.Delete" Title="Delete" Color="Color.Primary" @onclick="@(() =>  { DeleteSuperHeroAsync(item.Id);  })" />
                    </MudCardActions>
                </MudCard>
        }
    </div>   
</MudContainer>



@code {
    private List<SuperHeroesVM> allHeroes = new List<SuperHeroesVM>();

    protected override async Task OnInitializedAsync()
    {
        await GetAllSuperHeroesAsync();
    }

    private async Task GetAllSuperHeroesAsync()
    {
        allHeroes = await _httpClient.GetFromJsonAsync<List<SuperHeroesVM>>("/api/SuperHeroes");
    }

    private async Task DeleteSuperHeroAsync(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("Id", id);

        var dialog = await _dialogService.ShowAsync<SuperHeroeDeleteDialog>("Delete Confirmation", parameters);

        var result = await dialog.Result;

        if(!result.Cancelled)
        {
            allHeroes = allHeroes.Where(a => a.Id != id).ToList();
            StateHasChanged();
        }
    }
}
