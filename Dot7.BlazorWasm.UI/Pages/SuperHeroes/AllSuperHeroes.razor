@page "/superheroes/home"
@inject HttpClient _httpClient
@inject NavigationManager _navigationManager
@inject IDialogService _dialogService

<MudContainer Class="ma-4">
    <div class="d-flex ma-2">
        <MudGrid>
            <MudItem md="4">
                <MudSelect Class="mt-2" Margin="Margin.Dense" T="string" Label="Do Sorting..." Variant="Variant.Text" ValueChanged="DoSoringAsync">
                    <MudSelectItem Value="@("id-by-desc")">Id By Desc</MudSelectItem>
                    <MudSelectItem Value="@("id-by-asc")">Id By Asc</MudSelectItem>
                    <MudSelectItem Value="@("franchise-by-desc")">Franchise By Desc</MudSelectItem>
                    <MudSelectItem Value="@("franchise-by-asc")">Franchise Bu Asc</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem md="4">

                <MudTextField @bind-Value="SearchKey" Label="Search" Variant="Variant.Text" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search"
                              AdornmentColor="Color.Secondary" OnAdornmentClick="DoSearchAsync" />
            </MudItem>
        </MudGrid>
    </div>
    <div class="d-flex ma-2 justify-center"> 
        <MudFab Color="Color.Primary" Label="Add" @onclick="@(() =>  { _navigationManager.NavigateTo("/superheroes/add"); })" />
    </div>
    <div class="d-flex flex-wrap justify-center">
        @foreach (var item in allHeroes)
        {
            <MudCard Width="250px" Class="ma-2">
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudAvatar Color="Color.Secondary">@item.Id</MudAvatar>
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                            <MudText Typo="Typo.body1">@item.Name</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardMedia Image="@item.ImageUrl" Height="250" />
                    <MudCardContent>
                        <MudText Typo="Typo.body2">Franchise - @item.Franchise</MudText>
                        <MudText Typo="Typo.body2">Gender - @item.Gender</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudIcon Icon="@Icons.Material.Filled.Edit" Title="Edit" @onclick="@(() =>  { _navigationManager.NavigateTo($"/superheroes/edit/{item.Id}"); })"  />
                        <MudIcon Icon="@Icons.Material.Filled.Delete" Title="Delete" Color="Color.Primary" @onclick="@(() =>  { DeleteSuperHeroAsync(item.Id);  })" />
                    </MudCardActions>
                </MudCard>
        }
    </div>   
</MudContainer>



@code {
    private List<SuperHeroesVM> allHeroes = new List<SuperHeroesVM>();
    private string SortingKey { get; set; }
    private string SearchKey { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await GetAllSuperHeroesAsync();
    }

    private async Task GetAllSuperHeroesAsync()
    {
        string url = "/api/SuperHeroes";

        var sortingParam = GetSortedValue();

        url = $"{url}?sort={sortingParam.Sort ??  string.Empty}&OrderBy={sortingParam.OrderBy}&search={SearchKey}";

        allHeroes = await _httpClient.GetFromJsonAsync<List<SuperHeroesVM>>(url);
    }

    private async Task DeleteSuperHeroAsync(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("Id", id);

        var dialog = await _dialogService.ShowAsync<SuperHeroeDeleteDialog>("Delete Confirmation", parameters);

        var result = await dialog.Result;

        if(!result.Cancelled)
        {
            allHeroes = allHeroes.Where(a => a.Id != id).ToList();
            StateHasChanged();
        }
    }

    private (string Sort, string OrderBy)  GetSortedValue()
    {
        if (!string.IsNullOrEmpty(SortingKey))
        {
            if (SortingKey.ToLower() == "id-by-desc")
            {
                return ("id", "desc");
            }
            else if (SortingKey.ToLower() == "id-by-asc")
            {
                return ("id", "asc");
            }
            if (SortingKey.ToLower() == "franchise-by-desc")
            {
                return ("franchise", "desc");
            }
            if (SortingKey.ToLower() == "franchise-by-asc")
            {
                return ("franchise", "asc");
            }
        }

        return (string.Empty, string.Empty);
    }

    private async Task DoSoringAsync(string value)
    {
        SortingKey = value;
        await GetAllSuperHeroesAsync();
    }

    private async Task DoSearchAsync()
    {
        await GetAllSuperHeroesAsync();
    }
}
